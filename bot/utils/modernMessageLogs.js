const webhookLogger = require('./webhookLogger');
const configManager = require('./configManager');

/**
 * Adaptateur moderne pour les logs de messages
 * Remplace progressivement messageLogs.js avec le syst√®me webhook
 */
module.exports = {
    async logEditedMessage(oldMessage, newMessage) {
        try {
            // V√©rification des messages partiels
            if (oldMessage.partial) {
                try {
                    await oldMessage.fetch();
                } catch (error) {
                    console.error('‚ùå [ModernMessageLogger] Impossible de r√©cup√©rer l\'ancien message:', error.message);
                    return;
                }
            }

            if (newMessage.partial) {
                try {
                    await newMessage.fetch();
                } catch (error) {
                    console.error('‚ùå [ModernMessageLogger] Impossible de r√©cup√©rer le nouveau message:', error.message);
                    return;
                }
            }

            // Ignorer les messages de bots
            if (oldMessage.author.bot) {
                return;
            }

            // V√©rifier les exclusions de la configuration
            const config = configManager.getConfig();
            const exclusions = config.logging || {};

            // V√©rifier si le canal est exclu
            if (exclusions.excludedChannels && exclusions.excludedChannels.includes(newMessage.channelId)) {
                return;
            }
            
            // V√©rifier si l'utilisateur est exclu
            if (exclusions.excludedUsers && exclusions.excludedUsers.includes(newMessage.author.id)) {
                console.log('üîç [ModernMessageLogger] Utilisateur exclu des logs');
                return;
            }
            
            // V√©rifier si l'utilisateur a un r√¥le exclu
            if (exclusions.excludedRoles && newMessage.member) {
                const hasExcludedRole = newMessage.member.roles.cache.some(role => 
                    exclusions.excludedRoles.includes(role.id)
                );
                if (hasExcludedRole) {
                    console.log('üîç [ModernMessageLogger] Utilisateur avec r√¥le exclu des logs');
                    return;
                }
            }

            // Ignorer si le contenu n'a pas chang√© (peut-√™tre juste un embed)
            if (oldMessage.content === newMessage.content) {
                console.log('üîç [ModernMessageLogger] Contenu identique, pas de log n√©cessaire');
                return;
            }

            // Utiliser le webhook logger moderne
            await webhookLogger.logMessageEdit(oldMessage, newMessage);
            console.log('‚úÖ [ModernMessageLogger] Message √©dit√© logg√© avec succ√®s via webhook');

        } catch (error) {
            console.error('‚ùå [ModernMessageLogger] Erreur lors du log du message √©dit√©:', error);
        }
    },

    async logDeletedMessage(message) {
        try {
            console.log('üîç [ModernMessageLogger] Tentative de log d\'un message supprim√©...');
            
            // V√©rification des messages partiels
            if (message.partial) {
                console.log('üîç [ModernMessageLogger] Message partiel d√©tect√©...');
                try {
                    await message.fetch();
                } catch (error) {
                    console.error('‚ùå [ModernMessageLogger] Impossible de r√©cup√©rer le message:', error.message);
                    // On continue quand m√™me avec les infos limit√©es
                }
            }

            // Ignorer les messages de bots
            if (message.author && message.author.bot) {
                console.log('üîç [ModernMessageLogger] Message de bot ignor√©');
                return;
            }

            // V√©rifier les exclusions de la configuration
            const config = configManager.getConfig();
            const exclusions = config.logging || {};
            
            // V√©rifier si le canal est exclu
            if (exclusions.excludedChannels && exclusions.excludedChannels.includes(message.channelId)) {
                console.log('üîç [ModernMessageLogger] Canal exclu des logs');
                return;
            }
            
            // V√©rifier si l'utilisateur est exclu
            if (message.author && exclusions.excludedUsers && exclusions.excludedUsers.includes(message.author.id)) {
                console.log('üîç [ModernMessageLogger] Utilisateur exclu des logs');
                return;
            }
            
            // V√©rifier si l'utilisateur a un r√¥le exclu
            if (exclusions.excludedRoles && message.member) {
                const hasExcludedRole = message.member.roles.cache.some(role => 
                    exclusions.excludedRoles.includes(role.id)
                );
                if (hasExcludedRole) {
                    console.log('üîç [ModernMessageLogger] Utilisateur avec r√¥le exclu des logs');
                    return;
                }
            }

            // Ignorer les messages vides (souvent des embeds)
            if (!message.content && message.attachments.size === 0) {
                console.log('üîç [ModernMessageLogger] Message vide ignor√©');
                return;
            }

            // Utiliser le webhook logger moderne
            await webhookLogger.logMessageDelete(message);
            console.log('‚úÖ [ModernMessageLogger] Message supprim√© logg√© avec succ√®s via webhook');

        } catch (error) {
            console.error('‚ùå [ModernMessageLogger] Erreur lors du log du message supprim√©:', error);
        }
    }
};