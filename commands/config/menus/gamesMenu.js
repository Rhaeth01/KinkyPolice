const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, RoleSelectMenuBuilder } = require('discord.js');
const configManager = require('../../../utils/configManager');

class GamesMenu {
    static async show(interaction) {
        const config = configManager.getConfig();
        const gamesConfig = config.games || {};
        const forbiddenRoles = [];
        
        // R√©cup√©rer les r√¥les interdits
        if (gamesConfig.forbiddenRoleIds && Array.isArray(gamesConfig.forbiddenRoleIds)) {
            for (const roleId of gamesConfig.forbiddenRoleIds) {
                const role = await interaction.guild.roles.fetch(roleId).catch(() => null);
                if (role) {
                    forbiddenRoles.push(role);
                }
            }
        }
        
        const embed = new EmbedBuilder()
            .setTitle('üéÆ Configuration des Jeux & Animation')
            .setDescription('G√©rez les **r√¥les dr√¥les** qui peuvent √™tre attribu√©s temporairement via la commande `/vote` pour animer le serveur !\n\n**Commandes de jeux disponibles:**\n‚Ä¢ `/kinky` - Jeux NSFW\n‚Ä¢ `/quiz-kinky` - Quiz NSFW\n‚Ä¢ `/pendu` - Jeu du pendu\n‚Ä¢ `/pile-ou-face` - Pile ou face\n‚Ä¢ `/black-jack` - Blackjack')
            .setColor('#E74C3C')
            .addFields(
                {
                    name: 'üé≠ R√¥les d\'Animation (Vote)',
                    value: forbiddenRoles.length > 0 
                        ? forbiddenRoles.map(role => `<@&${role.id}>`).join('\n')
                        : 'Aucun r√¥le dr√¥le configur√©',
                    inline: false
                },
                {
                    name: 'üéØ Comment √ßa marche ?',
                    value: 'Avec `/vote @utilisateur role temps`, la communaut√© peut voter pour attribuer temporairement ces r√¥les embarrassants/dr√¥les ! Il faut 4 votes pour que √ßa passe.',
                    inline: false
                }
            )
            .setFooter({ text: 'Cliquez sur le bouton ci-dessous pour configurer les r√¥les dr√¥les' })
            .setTimestamp();

        const row1 = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('games_forbidden_roles')
                    .setLabel('Configurer les R√¥les Dr√¥les')
                    .setEmoji('üé≠')
                    .setStyle(ButtonStyle.Danger)
            );

        const row2 = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('config_back')
                    .setLabel('Retour')
                    .setEmoji('‚óÄÔ∏è')
                    .setStyle(ButtonStyle.Secondary)
            );

        return { embeds: [embed], components: [row1, row2] };
    }

    static async handleForbiddenRoles(interaction) {
        const config = configManager.getConfig();
        const gamesConfig = config.games || {};
        const forbiddenRoleIds = gamesConfig.forbiddenRoleIds || [];
        
        // Cr√©er un Role Select Menu Discord natif (avec recherche int√©gr√©e)
        const roleSelectMenu = new RoleSelectMenuBuilder()
            .setCustomId('games_forbidden_roles_select')
            .setPlaceholder('üîç Rechercher et s√©lectionner les r√¥les dr√¥les...')
            .setMinValues(0)
            .setMaxValues(10); // Limite raisonnable pour √©viter le spam

        const row = new ActionRowBuilder().addComponents(roleSelectMenu);

        const embed = new EmbedBuilder()
            .setTitle('üé≠ S√©lection des R√¥les d\'Animation')
            .setDescription('**Utilisez le menu ci-dessous** pour s√©lectionner les r√¥les dr√¥les/embarrassants !\n\n' +
                'üîç **Recherche int√©gr√©e** : Tapez le nom du r√¥le pour le trouver rapidement\n' +
                'üéØ **S√©lection multiple** : Vous pouvez choisir jusqu\'√† 10 r√¥les\n' +
                'üé≠ **R√¥les actuels** : ' + (forbiddenRoleIds.length > 0 ? 
                    forbiddenRoleIds.map(id => `<@&${id}>`).join(', ') : 
                    'Aucun r√¥le configur√©') + '\n\n' +
                '**Exemples de r√¥les dr√¥les :**\n' +
                '‚Ä¢ ü§° Clown du serveur\n' +
                '‚Ä¢ üò≥ Victime du jour\n' +
                '‚Ä¢ üôà G√™n√©(e)\n' +
                '‚Ä¢ üí© Caca\n' +
                '‚Ä¢ ü¶Ñ Licorne rose\n\n' +
                '‚ö†Ô∏è **Note** : Les r√¥les staff et avec permissions sp√©ciales seront automatiquement filtr√©s lors de la sauvegarde.')
            .setColor('#E74C3C')
            .setFooter({ text: 'Ces r√¥les seront disponibles dans la commande /vote pour l\'animation !' });

        await interaction.update({ embeds: [embed], components: [row] });
    }

    static async handleForbiddenRolesSelect(interaction, addPendingChanges) {
        const selectedRoles = interaction.roles;
        const selectedRoleIds = Array.from(selectedRoles.keys());
        
        // Filtrer les r√¥les pour exclure les r√¥les staff
        const config = configManager.getConfig();
        const adminRoleId = config.general?.adminRole;
        const modRoleId = config.general?.modRole;
        const supportRoleId = config.tickets?.supportRole;
        
        const filteredRoleIds = selectedRoleIds.filter(roleId => {
            const role = selectedRoles.get(roleId);
            if (!role) return false;
            
            // Exclure les r√¥les probl√©matiques
            return roleId !== interaction.guild.id && // @everyone
                   !role.managed && // r√¥les de bots
                   roleId !== adminRoleId && // admin
                   roleId !== modRoleId && // mod√©rateur
                   roleId !== supportRoleId && // support
                   !role.permissions.has('Administrator') && // permissions admin
                   !role.permissions.has('ModerateMembers'); // permissions mod√©ration
        });
        
        const filteredCount = selectedRoleIds.length - filteredRoleIds.length;
        
        // Ajouter les changements en attente via le configHandler
        if (addPendingChanges) {
            addPendingChanges(interaction.user.id, {
                'games.forbiddenRoleIds': filteredRoleIds
            });
        } else {
            // Fallback si addPendingChanges n'est pas fourni
            if (!config.games) config.games = {};
            config.games.forbiddenRoleIds = filteredRoleIds;
            await configManager.saveConfig(config);
        }

        let message = `‚úÖ Les r√¥les d'animation ont √©t√© mis √† jour ! ${filteredRoleIds.length} r√¥le(s) configur√©(s).`;
        if (filteredCount > 0) {
            message += `\n‚ö†Ô∏è ${filteredCount} r√¥le(s) staff exclu(s) automatiquement.`;
        }

        await interaction.followUp({
            content: message,
            ephemeral: true
        });

        // Rafra√Æchir le menu
        const menuContent = await this.show(interaction);
        await interaction.editReply(menuContent);
    }
}

module.exports = GamesMenu;