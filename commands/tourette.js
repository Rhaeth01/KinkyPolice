const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const ConfigManager = require('../utils/configManager');

// Mots al√©atoires pour remplacer les messages
const TOURETTE_WORDS = [
    'BANANA!', 'BISCUIT!', 'WAFFLES!', 'PICKLE RICK!', 'SQUEAKY CHEESE!',
    'RUBBER DUCK!', 'SPAGHETTI MONSTER!', 'DANCING LOBSTER!', 'COSMIC MUFFIN!',
    'RAINBOW EXPLOSION!', 'FLYING TACO!', 'MAGICAL UNICORN!', 'BOUNCING POTATO!',
    'GLITTERY DONUT!', 'SINGING CACTUS!', 'PURPLE ELEPHANT!', 'NINJA PENGUIN!',
    'SPARKLY BURRITO!', 'GIGANTIC MARSHMALLOW!', 'INVISIBLE SANDWICH!'
];

// Fonction pour v√©rifier si un utilisateur a le r√¥le interdit
function hasForbiddenRole(member) {
    try {
        const config = new ConfigManager();
        const forbiddenRoleIds = config.forbiddenRoleIds;
        
        if (!forbiddenRoleIds || !Array.isArray(forbiddenRoleIds)) {
            return false;
        }
        
        return forbiddenRoleIds.some(roleId => member.roles.cache.has(roleId));
    } catch (error) {
        console.error('[TOURETTE] Erreur lors de la v√©rification du r√¥le interdit:', error);
        return false;
    }
}

// Fonction pour traiter les messages des utilisateurs avec le r√¥le interdit
function processTouretteMessage(message) {
    if (message.author.bot) return false;
    if (!message.guild) return false;
    
    // R√©cup√©rer le membre
    const member = message.member;
    if (!member) return false;
    
    // V√©rifier si l'utilisateur a le r√¥le interdit
    if (!hasForbiddenRole(member)) return false;
    
    // Supprimer le message original
    message.delete().catch(console.error);
    
    // Choisir un mot al√©atoire
    const randomWord = TOURETTE_WORDS[Math.floor(Math.random() * TOURETTE_WORDS.length)];
    
    // Envoyer le message de remplacement
    message.channel.send({
        content: `**${message.author.username}:** ${randomWord}`
    }).catch(console.error);
    
    console.log(`[TOURETTE] Message de ${message.author.username} remplac√© par "${randomWord}" dans ${message.guild.name}`);
    
    return true;
}

module.exports = {
    data: new SlashCommandBuilder()
        .setName('tourette')
        .setDescription('G√®re le syst√®me de tourette automatique')
        .addSubcommand(subcommand =>
            subcommand
                .setName('info')
                .setDescription('Affiche les informations sur le syst√®me'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('config')
                .setDescription('Affiche la configuration actuelle'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('test')
                .setDescription('Teste un mot al√©atoire'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('add')
                .setDescription('Attribue le r√¥le interdit √† un utilisateur')
                .addUserOption(option =>
                    option.setName('utilisateur')
                        .setDescription('L\'utilisateur √† qui attribuer le r√¥le')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('remove')
                .setDescription('Retire le r√¥le interdit d\'un utilisateur')
                .addUserOption(option =>
                    option.setName('utilisateur')
                        .setDescription('L\'utilisateur √† qui retirer le r√¥le')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('list')
                .setDescription('Liste les utilisateurs ayant le r√¥le interdit')),
        .addSubcommand(subcommand =>
            subcommand
                .setName('add')        
        // V√©rifier les permissions pour les commandes de gestion des r√¥les
        if (['add', 'remove', 'list'].includes(subcommand)) {
            if (!interaction.member.permissions.has('ModerateMembers')) {
                return interaction.reply({
                    content: '‚ùå Vous devez avoir la permission de mod√©rer les membres pour utiliser cette commande.',
                    ephemeral: true
                });
            }
        }                .setDescription('Attribue le r√¥le interdit √† un utilisateur')
                .addUserOption(option =>
                    option.setName('utilisateur')
                        .setDescription('L\'utilisateur √† qui attribuer le r√¥le')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('remove')
                .setDescription('Retire le r√¥le interdit d\'un utilisateur')
                .addUserOption(option =>
                    option.setName('utilisateur')
                        .setDescription('L\'utilisateur √† qui retirer le r√¥le')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('list')
                .setDescription('Liste les utilisateurs ayant le r√¥le interdit')),

    async execute(interaction) {
        const subcommand = interaction.options.getSubcommand();
        
        switch (subcommand) {                        },
                        {
                            name: 'üîß Gestion',
                            value: 'Utilisez `/tourette add` et `/tourette remove` pour g√©rer les utilisateurs affect√©s',
                            inline: false            case 'info':
                const infoEmbed = new EmbedBuilder()
                    .setFooter({ text: 'Syst√®me automatique bas√© sur les r√¥les' })
                    .setColor('#ff6b6b')
                    .setDescription('Le syst√®me de tourette s\'applique automatiquement aux utilisateurs ayant le r√¥le interdit.')
                    .addFields(
                        { 
                            name: 'üéØ Fonctionnement', 
                            value: 'Tous les messages des utilisateurs avec le r√¥le interdit sont automatiquement supprim√©s et remplac√©s par leur nom suivi d\'un mot al√©atoire.', 
                            inline: false 
                        },
                        { 
                            name: 'üé≠ Mots utilis√©s', 
                            value: `${TOURETTE_WORDS.length} mots al√©atoires disponibles`, 
                            inline: true 
                        },
                        { 
                            name: '‚öôÔ∏è Configuration', 
                            value: 'Bas√© sur les `forbiddenRoleIds` dans la configuration', 
                            inline: true 
                        }
                    )
                    .setFooter({ text: 'Syst√®me automatique - Aucune intervention manuelle requise' })
                    .setTimestamp();

                await interaction.reply({
                    embeds: [infoEmbed],
                    ephemeral: true
                });
                break;

            case 'config':
                try {
                    const config = new ConfigManager();
                    const forbiddenRoleIds = config.forbiddenRoleIds;
                    
                    let roleInfo = 'Aucun r√¥le configur√©';
                    if (forbiddenRoleIds && Array.isArray(forbiddenRoleIds) && forbiddenRoleIds.length > 0) {
                        const roleList = forbiddenRoleIds.map(roleId => `<@&${roleId}>`).join('\n');
                        roleInfo = `**R√¥les concern√©s :**\n${roleList}`;
                    }
                    
                    const configEmbed = new EmbedBuilder()
                        .setTitle('‚öôÔ∏è Configuration du Syst√®me Tourette')
                        .setColor('#4c6ef5')
                        .setDescription(roleInfo)
                        .addFields(
                            { 
                                name: 'üìä Statut', 
                                value: forbiddenRoleIds && forbiddenRoleIds.length > 0 ? 'üü¢ Actif' : 'üî¥ Inactif', 
                                inline: true 
                            },
                            { 
                                name: 'üé≤ Mots disponibles', 
                                value: `${TOURETTE_WORDS.length} mots`, 
                                inline: true 
                            }
                        )
                        .setFooter({ text: 'Configuration automatique bas√©e sur forbiddenRoleIds' })
                        .setTimestamp();

                    await interaction.reply({
                        embeds: [configEmbed],
                        ephemeral: true
                    });
                } catch (error) {
                    console.error('[TOURETTE] Erreur lors de la r√©cup√©ration de la configuration:', error);
                    await interaction.reply({
                      
            case 'add':
                await this.handleAddRole(interaction);
                break;

            case 'remove':
                await this.handleRemoveRole(interaction);
                break;

            case 'list':
                await this.handleListUsers(interaction);
                break;                        ephemeral: true
      
    async handleAddRole(interaction) {
        const targetUser = interaction.options.getUser('utilisateur');
        
        try {
            // V√©rifications de s√©curit√©
            if (targetUser.id === interaction.user.id) {
                return interaction.reply({
                    content: '‚ùå Vous ne pouvez pas vous attribuer le r√¥le interdit √† vous-m√™me.',
                    ephemeral: true
                });
            }

            if (targetUser.bot) {
                return interaction.reply({
                    content: '‚ùå Les bots ne peuvent pas recevoir le r√¥le interdit.',
                    ephemeral: true
                });
            }

            // R√©cup√©rer le membre
            const targetMember = await interaction.guild.members.fetch(targetUser.id).catch(() => null);
            if (!targetMember) {
                return interaction.reply({
                    content: '‚ùå Cet utilisateur n\'est pas membre de ce serveur.',
                    ephemeral: true
                });
            }

            // V√©rifier la hi√©rarchie des r√¥les
            if (targetMember.roles.highest.position >= interaction.member.roles.highest.position && interaction.user.id !== interaction.guild.ownerId) {
                return interaction.reply({
                    content: '‚ùå Vous ne pouvez pas affecter un utilisateur ayant un r√¥le √©gal ou sup√©rieur au v√¥tre.',
                    ephemeral: true
                });
            }

            // R√©cup√©rer la configuration
            const config = new ConfigManager();
            const forbiddenRoleIds = config.forbiddenRoleIds;
            
            if (!forbiddenRoleIds || !Array.isArray(forbiddenRoleIds) || forbiddenRoleIds.length === 0) {
                return interaction.reply({
                    content: '‚ùå Aucun r√¥le interdit configur√©. Veuillez configurer `forbiddenRoleIds` d\'abord.',
                    ephemeral: true
                });
            }

            // Prendre le premier r√¥le interdit configur√©
            const forbiddenRoleId = forbiddenRoleIds[0];
            const forbiddenRole = interaction.guild.roles.cache.get(forbiddenRoleId);
            
            if (!forbiddenRole) {
                return interaction.reply({
                    content: `‚ùå Le r√¥le interdit configur√© (ID: ${forbiddenRoleId}) n'existe pas sur ce serveur.`,
                    ephemeral: true
                });
            }

            // V√©rifier si l'utilisateur a d√©j√† le r√¥le
            if (targetMember.roles.cache.has(forbiddenRoleId)) {
                return interaction.reply({
                    content: `‚ùå ${targetUser.username} a d√©j√† le r√¥le ${forbiddenRole.name}.`,
                    ephemeral: true
                });
            }

            // Attribuer le r√¥le
            await targetMember.roles.add(forbiddenRole);

            const successEmbed = new EmbedBuilder()
                .setTitle('ü§™ R√¥le Interdit Attribu√©')
                .setColor('#ff6b6b')
                .addFields(
                    { name: 'üë§ Utilisateur', value: `${targetUser}`, inline: true },
                    { name: 'üé≠ R√¥le', value: `${forbiddenRole}`, inline: true },
                    { name: '‚ö° Effet', value: 'Les messages seront maintenant remplac√©s automatiquement', inline: false }
                )
                .setFooter({ text: `Attribu√© par ${interaction.user.username}` })
                .setTimestamp();

            await interaction.reply({
                embeds: [successEmbed]
            });

            console.log(`[TOURETTE] R√¥le interdit attribu√© √† ${targetUser.username} (${targetUser.id}) par ${interaction.user.username} dans ${interaction.guild.name}`);

        } catch (error) {
            console.error('[TOURETTE] Erreur lors de l\'attribution du r√¥le:', error);
            await interaction.reply({
                content: '‚ùå Une erreur s\'est produite lors de l\'attribution du r√¥le.',
                ephemeral: true
            });
        }
    },

    async handleRemoveRole(interaction) {
        const targetUser = interaction.options.getUser('utilisateur');
        
        try {
            // R√©cup√©rer le membre
            const targetMember = await interaction.guild.members.fetch(targetUser.id).catch(() => null);
            if (!targetMember) {
                return interaction.reply({
                    content: '‚ùå Cet utilisateur n\'est pas membre de ce serveur.',
                    ephemeral: true
                });
            }

            // V√©rifier la hi√©rarchi                }
                break;

            case 'test':
                const randomWord = TOURETTE_WORDS[Math.floor(Math.random() * TOURETTE_WORDS.length)];
                
                const testEmbed = new EmbedBuilder()
                    .setTitle('üé≤ Test du Syst√®me Tourette')
                    .setColor('#51cf66')
                    .setDescription(`**${interaction.user.username}:** ${randomWord}`)
                    .setFooter({ text: 'Exemple de remplacement de message' })
                    .setTimestamp();

                await interaction.reply({
                    embeds: [testEmbed],
                    ephemeral: true
                });
                break;
        }
    },

    // Exporter la fonction de traitement des messages
    processTouretteMessage,
    hasForbiddenRole,
    TOURETTE_WORDS
};