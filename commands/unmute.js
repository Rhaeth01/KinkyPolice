const { SlashCommandBuilder, PermissionFlagsBits, EmbedBuilder } = require('discord.js');
const configManager = require('../utils/configManager');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('unmute')
        .setDescription('Retire la mise en sourdine d\'un membre du serveur.')
        .addUserOption(option =>
            option.setName('utilisateur')
                .setDescription('Le membre √† d√©muter.')
                .setRequired(true))
        .addStringOption(option =>
            option.setName('raison')
                .setDescription('La raison du d√©mute.')
                .setRequired(false))
        .setDefaultMemberPermissions(PermissionFlagsBits.MuteMembers)
        .setDMPermission(false),
    async execute(interaction) {
        const targetUser = interaction.options.getUser('utilisateur');
        const reason = interaction.options.getString('raison') || 'Aucune raison sp√©cifi√©e.';
        const member = interaction.guild.members.resolve(targetUser);

        if (!member) {
            return interaction.reply({ content: 'Impossible de trouver ce membre sur le serveur.', ephemeral: true });
        }

        if (member.id === interaction.user.id) {
            return interaction.reply({ content: 'Vous ne pouvez pas vous d√©muter vous-m√™me.', ephemeral: true });
        }

        if (member.id === interaction.client.user.id) {
            return interaction.reply({ content: 'Je ne peux pas me d√©muter moi-m√™me.', ephemeral: true });
        }

        if (interaction.member.roles.highest.position <= member.roles.highest.position) {
            return interaction.reply({
                content: 'Vous ne pouvez pas d√©muter un membre ayant un r√¥le √©gal ou sup√©rieur au v√¥tre.',
                ephemeral: true
            });
        }

        if (!member.moderatable) {
            return interaction.reply({ content: 'Je n\'ai pas les permissions n√©cessaires pour d√©muter ce membre. V√©rifiez ma hi√©rarchie de r√¥les.', ephemeral: true });
        }

        // V√©rifier si le membre est actuellement muet
        if (!member.isCommunicationDisabled()) {
            return interaction.reply({ 
                content: `${targetUser.tag} n'est pas actuellement en sourdine.`, 
                ephemeral: true 
            });
        }

        // DM √† l'utilisateur d√©mut√© - Version am√©lior√©e
        const dmEmbed = new EmbedBuilder()
            .setColor('#00FF00') // Vert pour bonne nouvelle
            .setTitle('üîä Fin de la Mise en Sourdine')
            .setDescription(`**Votre mise en sourdine a √©t√© lev√©e**`)
            .addFields(
                { name: 'üèõÔ∏è Serveur', value: `**${interaction.guild.name}**`, inline: true },
                { name: 'üëÆ Mod√©rateur', value: `**${interaction.user.tag}**`, inline: true },
                { name: 'üìÖ Date de lev√©e', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: true },
                { name: 'üìù Motif de la lev√©e', value: `\`\`\`${reason}\`\`\``, inline: false },
                { name: '‚úÖ Permissions restaur√©es', value: '‚Ä¢ Vous pouvez √† nouveau envoyer des messages\n‚Ä¢ Vous pouvez parler en vocal\n‚Ä¢ Vous pouvez r√©agir aux messages\n‚Ä¢ Vous pouvez cr√©er des fils de discussion', inline: false },
                { name: '‚ö†Ô∏è Rappel Important', value: 'Respectez le r√®glement du serveur pour √©viter de nouvelles sanctions.', inline: false }
            )
            .setThumbnail(interaction.guild.iconURL({ dynamic: true }))
            .setFooter({ 
                text: `Mod√©ration ${interaction.guild.name} ‚Ä¢ Fin de sanction`,
                iconURL: interaction.user.displayAvatarURL({ dynamic: true })
            })
            .setTimestamp();

        let dmSent = true;
        try {
            await targetUser.send({ embeds: [dmEmbed] });
        } catch (dmError) {
            dmSent = false;
            console.warn(`Impossible d'envoyer un DM √† ${targetUser.tag} pour son d√©mute.`);
        }

        try {
            // Retirer le mute
            await member.timeout(null, reason);
            
            // Log de l'unmute
            const RoleLogger = require('../roleLogs');
            const muteRole = { name: 'Mute' }; // R√¥le fictif pour le log
            await RoleLogger.logRoleChange(member, muteRole, 'unmute', interaction.user);
            
            const successEmbed = new EmbedBuilder()
                .setColor('#00FF00') // Vert pour succ√®s
                .setTitle('üîä Mise en sourdine lev√©e')
                .setDescription(`**${targetUser.displayName}** peut √† nouveau parler`)
                .addFields(
                    { name: 'üìù Raison', value: `\`\`\`${reason}\`\`\``, inline: false },
                    { name: 'üë§ Utilisateur', value: `<@${targetUser.id}>`, inline: true },
                    { name: '‚è∞ Lev√©e le', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: true }
                )
                .setThumbnail(targetUser.displayAvatarURL({ dynamic: true }))
                .setTimestamp()
                .setFooter({
                    text: dmSent ? 'Utilisateur notifi√© par MP' : 'Notification MP √©chou√©e (DM ferm√©s)',
                    iconURL: interaction.user.displayAvatarURL({ dynamic: true })
                });
            await interaction.reply({ embeds: [successEmbed], ephemeral: true });

            // Log de l'action dans le salon de mod√©ration
            const logActionModId = configManager.modLogChannelId;
            const logChannel = interaction.guild.channels.cache.get(logActionModId);
            if (logChannel) {
                const logEmbed = new EmbedBuilder()
                    .setColor('#00FF00') // Vert pour d√©mute
                    .setTitle('üîä Fin de Mise en Sourdine')
                    .setDescription(`Un membre a √©t√© d√©mut√©`)
                    .addFields(
                        { name: 'üë§ Membre D√©mut√©', value: `<@${targetUser.id}>`, inline: true },
                        { name: 'üëÆ Mod√©rateur', value: `<@${interaction.user.id}>`, inline: true },
                        { name: '‚è∞ Heure de lev√©e', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: true },
                        { name: 'üìù Raison', value: `\`\`\`${reason}\`\`\``, inline: false },
                        { name: 'üìç Salon', value: `<#${interaction.channelId}>`, inline: true },
                        { name: '‚úÖ Statut', value: '**Permissions restaur√©es**', inline: true }
                    )
                    .setThumbnail(targetUser.displayAvatarURL({ dynamic: true }))
                    .setFooter({
                        text: `Mod√©ration ‚Ä¢ ${targetUser.tag}`,
                        iconURL: interaction.guild.iconURL({ dynamic: true })
                    })
                    .setTimestamp();
                await logChannel.send({ embeds: [logEmbed] });
            }

        } catch (unmuteError) {
            console.error('Erreur lors du d√©mute du membre:', unmuteError);
            await interaction.reply({ content: 'Une erreur est survenue lors de la tentative de d√©mute du membre.', ephemeral: true });
        }
    },
};
