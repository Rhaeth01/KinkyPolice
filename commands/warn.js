const { SlashCommandBuilder, PermissionFlagsBits, EmbedBuilder } = require('discord.js');
const configManager = require('../utils/configManager');
const { addWarning, getUserWarnings } = require('../utils/warningsManager');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('warn')
        .setDescription('Avertit un membre du serveur.')
        .addUserOption(option =>
            option.setName('utilisateur')
                .setDescription('Le membre √† avertir.')
                .setRequired(true))
        .addStringOption(option =>
            option.setName('raison')
                .setDescription('La raison de l\'avertissement.')
                .setRequired(true))
        .setDefaultMemberPermissions(PermissionFlagsBits.ModerateMembers) // Ou une permission plus appropri√©e comme KickMembers si vous voulez que les m√™mes personnes puissent warn et kick
        .setDMPermission(false),
    async execute(interaction) {
        try {
            // === PHASE 1: VALIDATION DES PARAM√àTRES ===
            const targetUser = interaction.options.getUser('utilisateur');
            const reason = interaction.options.getString('raison');
            const member = interaction.guild.members.resolve(targetUser);

            // Validation de base
            const validationError = this.validateWarningRequest(interaction, member, targetUser);
            if (validationError) {
                return interaction.reply({ content: validationError, ephemeral: true });
            }

            // === PHASE 2: R√âCUP√âRATION DES DONN√âES EXISTANTES ===
            let currentWarnings = [];
            let currentTotal = 0;
            
            try {
                currentWarnings = getUserWarnings(interaction.guild.id, targetUser.id);
                currentTotal = currentWarnings.length;
            } catch (warningError) {
                console.error(`Erreur lors de la r√©cup√©ration des avertissements pour ${targetUser.tag}:`, warningError);
                // On continue avec des valeurs par d√©faut
                currentWarnings = [];
                currentTotal = 0;
            }

            // === PHASE 3: AJOUT DU NOUVEL AVERTISSEMENT ===
            const warningAdded = addWarning(interaction.guild.id, targetUser.id, interaction.user.id, reason);
            
            if (!warningAdded) {
                console.error(`√âchec critique de l'enregistrement de l'avertissement pour ${targetUser.tag} par ${interaction.user.tag}`);
                return interaction.reply({
                    content: '‚ùå **Erreur syst√®me** - Impossible d\'enregistrer l\'avertissement. Contactez un administrateur.',
                    ephemeral: true
                });
            }

            // === PHASE 4: CALCUL DU NOUVEAU TOTAL ===
            const newTotal = currentTotal + 1;

            // === PHASE 5: NOTIFICATION PRIV√âE √Ä L'UTILISATEUR ===
            const dmResult = await this.sendWarningDM(targetUser, interaction, reason, newTotal);

            // === PHASE 6: R√âPONSE √Ä L'INTERACTION ===
            await this.sendSuccessResponse(interaction, targetUser, reason, newTotal, dmResult.success);

            // === PHASE 7: LOG DE MOD√âRATION ===
            await this.logModerationAction(interaction, targetUser, reason, newTotal);

        } catch (error) {
            console.error('Erreur critique dans la commande warn:', error);
            
            // Gestion d'erreur robuste
            const errorMessage = '‚ùå **Erreur inattendue** - La commande a √©chou√©. L\'incident a √©t√© enregistr√©.';
            
            try {
                if (!interaction.replied && !interaction.deferred) {
                    await interaction.reply({ content: errorMessage, ephemeral: true });
                } else if (interaction.deferred) {
                    await interaction.editReply({ content: errorMessage });
                }
            } catch (replyError) {
                console.error('Impossible de r√©pondre √† l\'interaction apr√®s erreur:', replyError);
            }
        }
    },

    // === M√âTHODES UTILITAIRES ===
    
    /**
     * Valide la demande d'avertissement
     */
    validateWarningRequest(interaction, member, targetUser) {
        if (!member) {
            return 'Impossible de trouver ce membre sur le serveur.';
        }

        if (member.id === interaction.user.id) {
            return 'Vous ne pouvez pas vous avertir vous-m√™me.';
        }

        if (member.id === interaction.client.user.id) {
            return 'Je ne peux pas m\'avertir moi-m√™me.';
        }

        if (interaction.member.roles.highest.position <= member.roles.highest.position) {
            return 'Vous ne pouvez pas avertir un membre ayant un r√¥le √©gal ou sup√©rieur au v√¥tre.';
        }

        return null; // Pas d'erreur
    },

    /**
     * Envoie le message priv√© d'avertissement
     */
    async sendWarningDM(targetUser, interaction, reason, totalWarnings) {
        const dmEmbed = new EmbedBuilder()
            .setColor('#FFB347')
            .setTitle('‚ö†Ô∏è Avertissement Re√ßu')
            .setDescription(`**Vous avez re√ßu un avertissement officiel**`)
            .addFields(
                { name: 'üèõÔ∏è Serveur', value: `**${interaction.guild.name}**`, inline: true },
                { name: 'üëÆ Mod√©rateur', value: `**${interaction.user.tag}**`, inline: true },
                { name: 'üìä Total d\'avertissements', value: `**${totalWarnings}**`, inline: true },
                { name: 'üìù Motif de l\'avertissement', value: `\`\`\`${reason}\`\`\``, inline: false },
                { name: 'üìã Que faire maintenant ?', value: '‚Ä¢ Prenez connaissance de ce motif\n‚Ä¢ Respectez le r√®glement du serveur\n‚Ä¢ Contactez un mod√©rateur si vous avez des questions', inline: false },
                { name: '‚ö†Ô∏è Rappel Important', value: 'Les avertissements r√©p√©t√©s peuvent entra√Æner des sanctions plus s√©v√®res (mute, kick, ban).', inline: false }
            )
            .setThumbnail(interaction.guild.iconURL({ dynamic: true }))
            .setFooter({
                text: `Mod√©ration ${interaction.guild.name} ‚Ä¢ ${new Date().toLocaleDateString('fr-FR')}`,
                iconURL: interaction.user.displayAvatarURL({ dynamic: true })
            })
            .setTimestamp();

        try {
            await targetUser.send({ embeds: [dmEmbed] });
            return { success: true };
        } catch (dmError) {
            console.warn(`Impossible d'envoyer un DM √† ${targetUser.tag} pour son avertissement:`, dmError.message);
            return { success: false, error: dmError.message };
        }
    },

    /**
     * Envoie la r√©ponse de succ√®s
     */
    async sendSuccessResponse(interaction, targetUser, reason, totalWarnings, dmSent) {
        const successEmbed = new EmbedBuilder()
            .setColor(0xFFB347)
            .setTitle('‚ö†Ô∏è Avertissement appliqu√©')
            .setDescription(`**${targetUser.displayName}** a re√ßu un avertissement`)
            .addFields(
                { name: 'üìù Raison', value: `\`\`\`${reason}\`\`\``, inline: false },
                { name: 'üìä Total des avertissements', value: `**${totalWarnings}**`, inline: true },
                { name: 'üë§ Utilisateur', value: `<@${targetUser.id}>`, inline: true }
            )
            .setThumbnail(targetUser.displayAvatarURL({ dynamic: true }))
            .setTimestamp()
            .setFooter({
                text: dmSent ? 'Utilisateur notifi√© par MP' : 'Notification MP √©chou√©e (DM ferm√©s)',
                iconURL: interaction.user.displayAvatarURL({ dynamic: true })
            });
            
        await interaction.reply({ embeds: [successEmbed], ephemeral: true });
    },

    /**
     * Log l'action de mod√©ration
     */
    async logModerationAction(interaction, targetUser, reason, totalWarnings) {
        try {
            const logActionModId = configManager.logActionMod;
            if (!logActionModId) return;

            const logChannel = interaction.guild.channels.cache.get(logActionModId);
            if (!logChannel) return;

            const logEmbed = new EmbedBuilder()
                .setColor('#FFB347')
                .setTitle('‚ö†Ô∏è Avertissement !')
                .setDescription(`Un avertissement a √©t√© donn√© √† un membre`)
                .addFields(
                    { name: 'üë§ Membre Averti', value: `<@${targetUser.id}>`, inline: true },
                    { name: 'üëÆ Mod√©rateur', value: `<@${interaction.user.id}>`, inline: true },
                    { name: 'üìä Total Avertissements', value: `**${totalWarnings}** avertissement${totalWarnings > 1 ? 's' : ''}`, inline: true },
                    { name: 'üìù Raison', value: `\`\`\`${reason}\`\`\``, inline: false },
                    { name: 'üìç Salon', value: `<#${interaction.channelId}>`, inline: true },
                    { name: 'üïê Heure', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: true }
                )
                .setThumbnail(targetUser.displayAvatarURL({ dynamic: true }))
                .setFooter({
                    text: `Mod√©ration ‚Ä¢ ${targetUser.tag}`,
                    iconURL: interaction.guild.iconURL({ dynamic: true })
                })
                .setTimestamp();

            await logChannel.send({ embeds: [logEmbed] });
        } catch (logError) {
            console.error('Erreur lors du log de mod√©ration:', logError);
            // On ne fait pas √©chouer la commande pour un probl√®me de log
        }
    }
};