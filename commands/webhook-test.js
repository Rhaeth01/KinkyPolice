const { SlashCommandBuilder, PermissionFlagsBits, EmbedBuilder } = require('discord.js');
const webhookLogger = require('../utils/webhookLogger');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('webhook-test')
        .setDescription('Teste le syst√®me de webhooks avec des messages d\'exemple (Admin seulement)')
        .addStringOption(option =>
            option.setName('type')
                .setDescription('Type de log √† tester')
                .setRequired(true)
                .addChoices(
                    { name: 'Messages', value: 'messages' },
                    { name: 'Mod√©ration', value: 'moderation' },
                    { name: 'Vocal', value: 'voice' },
                    { name: 'R√¥les', value: 'roles' }
                ))
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),
    
    async execute(interaction) {
        try {
            await interaction.deferReply({ ephemeral: true });
            
            const testType = interaction.options.getString('type');
            
            console.log(`[WEBHOOK-TEST] Test du type: ${testType}`);
            
            // Cr√©er un embed de test selon le type
            const embed = new EmbedBuilder()
                .setTitle(`üß™ Test du Syst√®me - ${testType.charAt(0).toUpperCase() + testType.slice(1)}`)
                .setDescription(`Ceci est un message de test pour v√©rifier le bon fonctionnement des webhooks.`)
                .addFields([
                    { name: 'üéØ Type test√©', value: testType, inline: true },
                    { name: 'üë§ Test√© par', value: `${interaction.user}`, inline: true },
                    { name: 'üïê Horodatage', value: `<t:${Math.floor(Date.now()/1000)}:F>`, inline: false }
                ])
                .setColor('#00FF00')
                .setTimestamp();
            
            // Envoyer selon le type
            let result;
            switch (testType) {
                case 'messages':
                    result = await webhookLogger.log('messageLogs', embed);
                    break;
                case 'moderation':
                    result = await webhookLogger.logModeration('Test Mod√©ration', interaction.user, interaction.user, 'Test automatique du syst√®me', {
                        color: '#FF8C00'
                    });
                    break;
                case 'voice':
                    result = await webhookLogger.log('voiceLogs', embed);
                    break;
                case 'roles':
                    result = await webhookLogger.log('roleLogs', embed);
                    break;
                default:
                    throw new Error('Type de test non reconnu');
            }
            
            await interaction.editReply({
                content: `‚úÖ Test envoy√© pour le type **${testType}**!\n\n` +
                        `üîç V√©rifiez le canal correspondant pour voir si le message est apparu.\n` +
                        `üìù Si le message n'appara√Æt pas, le syst√®me est en mode fallback ou le canal n'est pas configur√©.`
            });
            
        } catch (error) {
            console.error('[WEBHOOK-TEST] Erreur:', error);
            
            await interaction.editReply({
                content: `‚ùå Erreur lors du test: ${error.message}\n\n` +
                        `üí° Cela peut indiquer un probl√®me de configuration des webhooks ou des canaux.`
            });
        }
    },
};