// Structure de configuration bas√©e sur l'utilisation r√©elle dans le code
const CONFIG_STRUCTURE = {
    // Canaux de logs
    logging: {
        name: 'üìä Logs',
        icon: 'üìù',
        color: '#FEE75C',
        description: 'Configuration des diff√©rents canaux de logs',
        fields: {
            logChannelId: {
                label: 'Canal de logs g√©n√©ral',
                type: 'channel',
                description: 'Logs g√©n√©raux (arriv√©es membres, lock/unlock)',
                required: false
            },
            logActionMod: {
                label: 'Canal de logs mod√©ration',
                type: 'channel',
                description: 'Actions de mod√©ration (ban, kick, warn, mute)',
                required: false
            },
            messageLogChannelId: {
                label: 'Canal de logs messages',
                type: 'channel',
                description: 'Messages supprim√©s et √©dit√©s',
                required: false
            },
            roleLogChannelId: {
                label: 'Canal de logs r√¥les',
                type: 'channel',
                description: 'Changements de r√¥les des membres',
                required: false
            },
            voiceLogChannelId: {
                label: 'Canal de logs vocaux',
                type: 'channel',
                description: 'Activit√© dans les canaux vocaux',
                required: false
            }
        }
    },

    // Syst√®me d'entr√©e et tickets
    entry: {
        name: 'üö™ Entr√©e & Tickets',
        icon: 'üé´',
        color: '#5865F2',
        description: 'Configuration du syst√®me d\'entr√©e et des tickets',
        fields: {
            entryRequestChannelId: {
                label: 'Canal des demandes d\'entr√©e',
                type: 'channel',
                description: 'Canal o√π les demandes d\'acc√®s sont post√©es',
                required: false
            },
            acceptedEntryCategoryId: {
                label: 'Cat√©gorie des entr√©es accept√©es',
                type: 'category',
                description: 'Cat√©gorie pour les tickets d\'entr√©e accept√©s',
                required: false
            },
            ticketCategoryId: {
                label: 'Cat√©gorie des tickets',
                type: 'category',
                description: 'Cat√©gorie pour les tickets de support',
                required: false
            },
            logsTicketsChannelId: {
                label: 'Canal des logs tickets',
                type: 'channel',
                description: 'Archives des tickets ferm√©s',
                required: false
            },
            forbiddenRoleIds: {
                label: 'R√¥les interdits',
                type: 'role-multi',
                description: 'R√¥les interdits (ex: pour la commande tourette)',
                required: false
            }
        }
    },

    // Configuration des r√¥les
    roles: {
        name: 'üë• R√¥les',
        icon: 'üõ°Ô∏è',
        color: '#ED4245',
        description: 'Configuration des r√¥les automatiques',
        fields: {
            newMemberRoleIds: {
                label: 'R√¥les nouveaux membres',
                type: 'role-multi',
                description: 'R√¥les attribu√©s automatiquement aux nouveaux membres',
                required: false
            },
            reglesValidesId: {
                label: 'R√¥le r√®gles valid√©es',
                type: 'role',
                description: 'R√¥le attribu√© apr√®s validation des r√®gles',
                required: false
            },
            rolesToCheckBeforeAdd: {
                label: 'R√¥les √† v√©rifier avant ajout',
                type: 'role-multi',
                description: 'R√¥les √† v√©rifier avant d\'ajouter certains r√¥les',
                required: false
            },
            rolesToRemoveOnAccept: {
                label: 'R√¥les √† retirer √† l\'acceptation',
                type: 'role-multi',
                description: 'R√¥les retir√©s lors de l\'acceptation d\'une entr√©e',
                required: false
            }
        }
    },

    // Confessions
    confession: {
        name: 'üòà Confessions',
        icon: 'ü§´',
        color: '#E91E63',
        description: 'Syst√®me de confessions anonymes',
        fields: {
            confessionChannelId: {
                label: 'Canal des confessions',
                type: 'channel',
                description: 'Canal o√π sont post√©es les confessions',
                required: false
            }
        }
    },

    // Quiz quotidien
    games: {
        name: 'üéÆ Jeux',
        icon: 'üéØ',
        color: '#1ABC9C',
        description: 'Configuration des jeux et quiz',
        fields: {
            dailyQuizChannelId: {
                label: 'Canal du quiz quotidien',
                type: 'channel',
                description: 'Canal pour le quiz quotidien automatique',
                required: false
            }
        }
    },

    // Configuration des modales
    modals: {
        name: 'üìù Formulaires',
        icon: 'üìã',
        color: '#9B59B6',
        description: 'Configuration des formulaires d\'entr√©e',
        fields: {
            entryModal: {
                label: 'Configuration modale d\'entr√©e',
                type: 'json',
                description: 'Structure JSON de la modale d\'entr√©e',
                required: false,
                placeholder: '{"fields": [{"id": "field1", "label": "Question", "required": true}]}'
            }
        }
    }
};

// Types de champs r√©ellement utilis√©s
const FIELD_TYPES = {
    channel: {
        name: 'Canal',
        icon: 'üì∫',
        validation: (value) => !value || /^\d{17,19}$/.test(value)
    },
    category: {
        name: 'Cat√©gorie',
        icon: 'üìÅ',
        validation: (value) => !value || /^\d{17,19}$/.test(value)
    },
    role: {
        name: 'R√¥le',
        icon: 'üë§',
        validation: (value) => !value || /^\d{17,19}$/.test(value)
    },
    'role-multi': {
        name: 'R√¥les multiples',
        icon: 'üë•',
        validation: (value) => {
            if (!value) return true;
            if (!Array.isArray(value)) return false;
            return value.every(v => /^\d{17,19}$/.test(v));
        }
    },
    json: {
        name: 'Configuration JSON',
        icon: '{}',
        validation: (value) => {
            if (!value) return true;
            try {
                JSON.parse(value);
                return true;
            } catch {
                return false;
            }
        }
    }
};

// Helper pour obtenir la valeur depuis la config actuelle
function getConfigValue(config, section, field) {
    // Gestion des cas sp√©ciaux o√π les champs sont √† la racine
    const rootFields = [
        'confessionChannelId',
        'logActionMod',
        'logChannelId',
        'messageLogChannelId',
        'roleLogChannelId',
        'voiceLogChannelId',
        'ticketCategoryId',
        'acceptedEntryCategoryId',
        'entryRequestChannelId',
        'logsTicketsChannelId',
        'newMemberRoleIds',
        'reglesValidesId',
        'rolesToCheckBeforeAdd',
        'rolesToRemoveOnAccept',
        'dailyQuizChannelId',
        'entryModal'
    ];

    if (rootFields.includes(field)) {
        return config[field];
    }

    // Pour forbiddenRoleIds qui est dans entry
    if (field === 'forbiddenRoleIds' && config.entry) {
        return config.entry.forbiddenRoleIds;
    }

    return config[section]?.[field];
}

// Helper pour mettre √† jour la config
function setConfigValue(config, section, field, value) {
    // Gestion des cas sp√©ciaux o√π les champs sont √† la racine
    const rootFields = [
        'confessionChannelId',
        'logActionMod',
        'logChannelId',
        'messageLogChannelId',
        'roleLogChannelId',
        'voiceLogChannelId',
        'ticketCategoryId',
        'acceptedEntryCategoryId',
        'entryRequestChannelId',
        'logsTicketsChannelId',
        'newMemberRoleIds',
        'reglesValidesId',
        'rolesToCheckBeforeAdd',
        'rolesToRemoveOnAccept',
        'dailyQuizChannelId',
        'entryModal'
    ];

    if (rootFields.includes(field)) {
        if (!value || value === '') {
            delete config[field];
        } else {
            config[field] = value;
        }
        return;
    }

    // Pour forbiddenRoleIds qui doit √™tre dans entry
    if (field === 'forbiddenRoleIds') {
        if (!config.entry) config.entry = {};
        if (!value || (Array.isArray(value) && value.length === 0)) {
            delete config.entry.forbiddenRoleIds;
        } else {
            config.entry.forbiddenRoleIds = value;
        }
        return;
    }

    // Pour les autres champs
    if (!config[section]) config[section] = {};
    if (!value || value === '') {
        delete config[section][field];
    } else {
        config[section][field] = value;
    }
}

module.exports = { CONFIG_STRUCTURE, FIELD_TYPES, getConfigValue, setConfigValue };