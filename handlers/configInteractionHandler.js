const { EmbedBuilder } = require('discord.js');
const configManager = require('../utils/configManager');

class ConfigInteractionHandler {
    constructor() {
        this.activeInteractions = new Map();
    }

    async handleModalSubmit(interaction) {
        if (!interaction.customId.startsWith('config_modal_')) return false;

        const [, , sectionKey, fieldKey] = interaction.customId.split('_');
        
        try {
            // V√©rifier si l'interaction a d√©j√† √©t√© trait√©e
            if (interaction.replied || interaction.deferred) {
                console.log('[CONFIG HANDLER] Interaction d√©j√† trait√©e, ignor√©e');
                return true;
            }

            await interaction.deferReply({ ephemeral: true });
            
            const newValue = interaction.fields.getTextInputValue('field_value').trim();
            const config = configManager.getConfig();
            
            // Initialiser la section si elle n'existe pas
            if (!config[sectionKey]) {
                config[sectionKey] = {};
            }
            
            // Mettre √† jour ou supprimer la valeur
            if (newValue === '') {
                delete config[sectionKey][fieldKey];
            } else {
                // Validation selon le type
                const fieldType = this.getFieldType(sectionKey, fieldKey);
                if (fieldType && !this.validateFieldValue(newValue, fieldType)) {
                    await interaction.editReply({
                        content: `‚ùå Valeur invalide pour ${fieldKey}. ${this.getValidationMessage(fieldType)}`,
                        ephemeral: true
                    });
                    return true;
                }
                
                config[sectionKey][fieldKey] = newValue;
            }
            
            // Sauvegarder
            await configManager.updateConfig(config);
            
            // Cr√©er un embed de confirmation moderne
            const embed = new EmbedBuilder()
                .setTitle('‚úÖ Configuration mise √† jour')
                .setDescription(`**${fieldKey}** a √©t√© modifi√© avec succ√®s`)
                .addFields([
                    {
                        name: 'üìù Nouvelle valeur',
                        value: newValue || '*Supprim√©*',
                        inline: true
                    },
                    {
                        name: 'üìÇ Section',
                        value: sectionKey,
                        inline: true
                    }
                ])
                .setColor('#00ff00')
                .setTimestamp();
            
            await interaction.editReply({
                embeds: [embed],
                ephemeral: true
            });
            
            return true;
            
        } catch (error) {
            console.error('[CONFIG HANDLER] Erreur:', error);
            
            try {
                const errorEmbed = new EmbedBuilder()
                    .setTitle('‚ùå Erreur de configuration')
                    .setDescription(`Impossible de sauvegarder la modification`)
                    .addFields([
                        {
                            name: 'üîç D√©tails',
                            value: error.message,
                            inline: false
                        }
                    ])
                    .setColor('#ff0000')
                    .setTimestamp();
                
                if (interaction.deferred && !interaction.replied) {
                    await interaction.editReply({
                        embeds: [errorEmbed],
                        ephemeral: true
                    });
                } else if (!interaction.replied) {
                    await interaction.reply({
                        embeds: [errorEmbed],
                        ephemeral: true
                    });
                }
            } catch (replyError) {
                console.error('[CONFIG HANDLER] Erreur lors de la r√©ponse:', replyError);
            }
            
            return true;
        }
    }

    async handleButtonInteraction(interaction) {
        if (!interaction.customId.startsWith('config_')) return false;

        try {
            // G√©rer les diff√©rents types de boutons
            if (interaction.customId === 'config_refresh') {
                await this.refreshConfigDisplay(interaction);
            } else if (interaction.customId === 'config_backup') {
                await this.createBackup(interaction);
            } else if (interaction.customId === 'config_restore') {
                await this.showRestoreOptions(interaction);
            }
            
            return true;
            
        } catch (error) {
            console.error('[CONFIG HANDLER] Erreur bouton:', error);
            
            try {
                if (!interaction.replied && !interaction.deferred) {
                    await interaction.reply({
                        content: '‚ùå Une erreur est survenue lors du traitement de votre demande.',
                        ephemeral: true
                    });
                }
            } catch (replyError) {
                console.error('[CONFIG HANDLER] Erreur lors de la r√©ponse:', replyError);
            }
            
            return true;
        }
    }

    async refreshConfigDisplay(interaction) {
        try {
            if (interaction.replied || interaction.deferred) {
                return;
            }

            await interaction.deferUpdate();
            
            const config = configManager.getConfig();
            
            const embed = new EmbedBuilder()
                .setTitle('üîÑ Configuration actualis√©e')
                .setDescription('La configuration a √©t√© recharg√©e depuis le fichier')
                .setColor('#3498db')
                .setTimestamp();
            
            // Ajouter un r√©sum√© des sections
            const sections = Object.keys(config);
            embed.addFields([
                {
                    name: 'üìä Statistiques',
                    value: `**Sections:** ${sections.length}\n**Derni√®re mise √† jour:** ${new Date().toLocaleString('fr-FR')}`,
                    inline: false
                }
            ]);
            
            await interaction.editReply({
                embeds: [embed]
            });
        } catch (error) {
            console.error('[CONFIG HANDLER] Erreur refresh:', error);
        }
    }

    async createBackup(interaction) {
        try {
            if (interaction.replied || interaction.deferred) {
                return;
            }

            await interaction.deferReply({ ephemeral: true });
            
            const config = configManager.getConfig();
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const backupData = {
                timestamp: new Date().toISOString(),
                guild: interaction.guild.id,
                config: config
            };
            
            const backupString = JSON.stringify(backupData, null, 2);
            const buffer = Buffer.from(backupString, 'utf8');
            
            const embed = new EmbedBuilder()
                .setTitle('üíæ Sauvegarde cr√©√©e')
                .setDescription('Votre configuration a √©t√© export√©e avec succ√®s')
                .addFields([
                    {
                        name: 'üìÖ Date',
                        value: new Date().toLocaleString('fr-FR'),
                        inline: true
                    },
                    {
                        name: 'üè∑Ô∏è Serveur',
                        value: interaction.guild.name,
                        inline: true
                    }
                ])
                .setColor('#f39c12')
                .setTimestamp();
            
            await interaction.editReply({
                embeds: [embed],
                files: [{
                    attachment: buffer,
                    name: `backup-${interaction.guild.id}-${timestamp}.json`
                }]
            });
            
        } catch (error) {
            console.error('[CONFIG HANDLER] Erreur backup:', error);
            
            try {
                if (!interaction.replied) {
                    await interaction.editReply({
                        content: '‚ùå Erreur lors de la cr√©ation de la sauvegarde.',
                        ephemeral: true
                    });
                }
            } catch (replyError) {
                console.error('[CONFIG HANDLER] Erreur lors de la r√©ponse backup:', replyError);
            }
        }
    }

    async showRestoreOptions(interaction) {
        try {
            if (interaction.replied || interaction.deferred) {
                return;
            }

            const embed = new EmbedBuilder()
                .setTitle('üîÑ Restauration de configuration')
                .setDescription('Pour restaurer une configuration, envoyez un fichier de sauvegarde dans ce canal.')
                .addFields([
                    {
                        name: 'üìã Instructions',
                        value: '1. T√©l√©chargez votre fichier de sauvegarde\n2. Glissez-d√©posez le dans ce canal\n3. Confirmez la restauration',
                        inline: false
                    },
                    {
                        name: '‚ö†Ô∏è Attention',
                        value: 'La restauration remplacera toute la configuration actuelle',
                        inline: false
                    }
                ])
                .setColor('#e74c3c')
                .setTimestamp();
            
            await interaction.reply({
                embeds: [embed],
                ephemeral: true
            });
        } catch (error) {
            console.error('[CONFIG HANDLER] Erreur restore options:', error);
        }
    }

    // M√©thodes utilitaires
    getFieldType(sectionKey, fieldKey) {
        const CONFIG_SECTIONS = {
            general: {
                fields: [
                    { key: 'prefix', type: 'text' },
                    { key: 'adminRole', type: 'role' },
                    { key: 'modRole', type: 'role' }
                ]
            },
            entry: {
                fields: [
                    { key: 'welcomeChannel', type: 'channel' },
                    { key: 'rulesChannel', type: 'channel' },
                    { key: 'verificationRole', type: 'role' }
                ]
            },
            modmail: {
                fields: [
                    { key: 'modmailCategory', type: 'category' },
                    { key: 'modmailLogs', type: 'channel' }
                ]
            },
            tickets: {
                fields: [
                    { key: 'ticketCategory', type: 'category' },
                    { key: 'supportRole', type: 'role' },
                    { key: 'ticketLogs', type: 'channel' }
                ]
            },
            logging: {
                fields: [
                    { key: 'modLogs', type: 'channel' },
                    { key: 'messageLogs', type: 'channel' },
                    { key: 'voiceLogs', type: 'channel' },
                    { key: 'memberLogs', type: 'channel' },
                    { key: 'roleLogChannelId', type: 'channel' }
                ]
            },
            welcome: {
                fields: [
                    { key: 'welcomeMessage', type: 'text' },
                    { key: 'rulesMessage', type: 'text' },
                    { key: 'welcomeDM', type: 'text' }
                ]
            },
            confession: {
                fields: [
                    { key: 'confessionChannel', type: 'channel' }
                ]
            },
            games: {
                fields: [
                    { key: 'gameChannel', type: 'channel' },
                    { key: 'gameLeaderboard', type: 'channel' }
                ]
            },
            kink: {
                fields: [
                    { key: 'nsfwChannel', type: 'channel' },
                    { key: 'kinkLevels', type: 'text' },
                    { key: 'kinkLogs', type: 'channel' }
                ]
            }
        };

        const section = CONFIG_SECTIONS[sectionKey];
        if (!section) return null;
        
        const field = section.fields.find(f => f.key === fieldKey);
        return field ? field.type : null;
    }

    validateFieldValue(value, type) {
        if (type === 'channel' || type === 'role' || type === 'category' || type === 'user') {
            return /^\d{17,19}$/.test(value);
        }
        return true;
    }

    getValidationMessage(type) {
        if (type === 'channel' || type === 'role' || type === 'category' || type === 'user') {
            return 'Veuillez entrer un ID Discord valide (17-19 chiffres).';
        }
        return '';
    }

    // M√©thode pour nettoyer les interactions expir√©es
    cleanupExpiredInteractions() {
        const now = Date.now();
        const expiredKeys = [];
        
        for (const [key, data] of this.activeInteractions) {
            if (now - data.timestamp > 300000) { // 5 minutes
                expiredKeys.push(key);
            }
        }
        
        expiredKeys.forEach(key => this.activeInteractions.delete(key));
    }
}

module.exports = new ConfigInteractionHandler();