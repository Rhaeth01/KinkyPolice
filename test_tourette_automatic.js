const { processTouretteMessage, hasForbiddenRole, TOURETTE_WORDS } = require('./commands/tourette.js');
const ConfigManager = require('./utils/configManager');

console.log('üß™ Test du syst√®me de tourette automatique\n');

// Test 1: V√©rification des mots de tourette
console.log('üìù Test 1: V√©rification des mots de tourette');
console.log(`Nombre de mots disponibles: ${TOURETTE_WORDS.length}`);
console.log(`Exemples de mots: ${TOURETTE_WORDS.slice(0, 5).join(', ')}`);
console.log('‚úÖ Test 1 r√©ussi\n');

// Test 2: V√©rification de la configuration
console.log('‚öôÔ∏è Test 2: V√©rification de la configuration');
try {
    const config = new ConfigManager();
    const forbiddenRoleIds = config.forbiddenRoleIds;
    
    console.log('Configuration charg√©e avec succ√®s');
    console.log(`forbiddenRoleIds: ${JSON.stringify(forbiddenRoleIds)}`);
    
    if (forbiddenRoleIds && Array.isArray(forbiddenRoleIds)) {
        console.log(`‚úÖ Configuration valide - ${forbiddenRoleIds.length} r√¥le(s) configur√©(s)`);
    } else {
        console.log('‚ö†Ô∏è Aucun r√¥le interdit configur√©');
    }
} catch (error) {
    console.error('‚ùå Erreur de configuration:', error.message);
}
console.log('‚úÖ Test 2 termin√©\n');

// Test 3: Simulation de la fonction hasForbiddenRole
console.log('üé≠ Test 3: Simulation de la fonction hasForbiddenRole');

// Mock d'un membre avec r√¥les
const mockMemberWithForbiddenRole = {
    roles: {
        cache: {
            has: (roleId) => {
                // Simuler qu'il a le r√¥le interdit
                return roleId === 'test_forbidden_role_id';
            }
        }
    }
};

const mockMemberWithoutForbiddenRole = {
    roles: {
        cache: {
            has: (roleId) => {
                // Simuler qu'il n'a pas le r√¥le interdit
                return false;
            }
        }
    }
};

// Mock temporaire de ConfigManager pour le test
const originalConfigManager = require('./utils/configManager');
const MockConfigManager = class {
    get forbiddenRoleIds() {
        return ['test_forbidden_role_id'];
    }
};

// Remplacer temporairement
require.cache[require.resolve('./utils/configManager')] = {
    exports: MockConfigManager
};

try {
    // Recharger la fonction avec le mock
    delete require.cache[require.resolve('./commands/tourette.js')];
    const { hasForbiddenRole: testHasForbiddenRole } = require('./commands/tourette.js');
    
    const result1 = testHasForbiddenRole(mockMemberWithForbiddenRole);
    const result2 = testHasForbiddenRole(mockMemberWithoutForbiddenRole);
    
    console.log(`Membre avec r√¥le interdit: ${result1 ? '‚úÖ D√©tect√©' : '‚ùå Non d√©tect√©'}`);
    console.log(`Membre sans r√¥le interdit: ${result2 ? '‚ùå Faux positif' : '‚úÖ Correct'}`);
    
    if (result1 && !result2) {
        console.log('‚úÖ Test 3 r√©ussi - D√©tection des r√¥les fonctionne correctement');
    } else {
        console.log('‚ùå Test 3 √©chou√© - Probl√®me de d√©tection des r√¥les');
    }
} catch (error) {
    console.error('‚ùå Erreur lors du test 3:', error.message);
} finally {
    // Restaurer le ConfigManager original
    require.cache[require.resolve('./utils/configManager')] = {
        exports: originalConfigManager
    };
}
console.log('‚úÖ Test 3 termin√©\n');

// Test 4: Test de g√©n√©ration de mots al√©atoires
console.log('üé≤ Test 4: Test de g√©n√©ration de mots al√©atoires');
const randomWords = [];
for (let i = 0; i < 10; i++) {
    const randomWord = TOURETTE_WORDS[Math.floor(Math.random() * TOURETTE_WORDS.length)];
    randomWords.push(randomWord);
}

console.log('Mots al√©atoires g√©n√©r√©s:');
randomWords.forEach((word, index) => {
    console.log(`  ${index + 1}. ${word}`);
});

const uniqueWords = new Set(randomWords);
console.log(`Diversit√©: ${uniqueWords.size}/${randomWords.length} mots uniques`);
console.log('‚úÖ Test 4 termin√©\n');

// Test 5: V√©rification de l'export des fonctions
console.log('üì¶ Test 5: V√©rification des exports');
try {
    const tourette = require('./commands/tourette.js');
    
    const requiredExports = ['processTouretteMessage', 'hasForbiddenRole', 'TOURETTE_WORDS'];
    const availableExports = Object.keys(tourette);
    
    console.log(`Exports disponibles: ${availableExports.join(', ')}`);
    
    const missingExports = requiredExports.filter(exp => !availableExports.includes(exp));
    if (missingExports.length === 0) {
        console.log('‚úÖ Tous les exports requis sont pr√©sents');
    } else {
        console.log(`‚ùå Exports manquants: ${missingExports.join(', ')}`);
    }
    
    // V√©rifier que data existe pour la commande slash
    if (tourette.data && tourette.data.name === 'tourette') {
        console.log('‚úÖ Commande slash configur√©e correctement');
    } else {
        console.log('‚ùå Probl√®me avec la configuration de la commande slash');
    }
    
} catch (error) {
    console.error('‚ùå Erreur lors du test 5:', error.message);
}
console.log('‚úÖ Test 5 termin√©\n');

console.log('üéâ Tests termin√©s !');
console.log('\nüìã R√©sum√©:');
console.log('- Le syst√®me de tourette automatique est configur√©');
console.log('- Il s\'applique aux utilisateurs avec forbiddenRoleIds');
console.log('- Les messages sont remplac√©s par: "**Nom:** MOT_ALEATOIRE"');
console.log('- La commande /tourette fournit des informations sur le syst√®me');
console.log('\n‚ö†Ô∏è Note: Pour tester compl√®tement, assurez-vous que:');
console.log('1. forbiddenRoleIds est configur√© dans config.json');
console.log('2. Le bot a les permissions de supprimer des messages');
console.log('3. Le syst√®me est int√©gr√© dans messageCreate.js (d√©j√† fait)');