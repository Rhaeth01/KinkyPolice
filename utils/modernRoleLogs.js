const webhookLogger = require('./webhookLogger');
const configManager = require('./configManager');

/**
 * Adaptateur moderne pour les logs de r√¥les
 * Remplace progressivement roleLogs.js avec le syst√®me webhook
 */
module.exports = {
    async logRoleChange(member, role, action, moderator) {
        try {
            console.log(`üîç [ModernRoleLogger] Tentative de log ${action} du r√¥le...`);
            
            // Validation des param√®tres
            if (!member || !role || !action || !moderator) {
                console.error('‚ùå [ModernRoleLogger] Param√®tres manquants:', { member: !!member, role: !!role, action, moderator: !!moderator });
                return;
            }

            // Ignorer les r√¥les syst√®me ou g√©r√©s par des bots (sauf si c'est important)
            if (role.managed && role.name.includes('bot')) {
                console.log('üîç [ModernRoleLogger] R√¥le de bot ignor√©');
                return;
            }

            // Ignorer le r√¥le @everyone
            if (role.name === '@everyone') {
                console.log('üîç [ModernRoleLogger] R√¥le @everyone ignor√©');
                return;
            }

            // V√©rifier les exclusions de la configuration
            const config = configManager.getConfig();
            const exclusions = config.logging || {};
            
            // V√©rifier si l'utilisateur est exclu
            if (exclusions.excludedUsers && exclusions.excludedUsers.includes(member.id)) {
                console.log('üîç [ModernRoleLogger] Utilisateur exclu des logs de r√¥les');
                return;
            }
            
            // V√©rifier si le r√¥le est exclu
            if (exclusions.excludedRoles && exclusions.excludedRoles.includes(role.id)) {
                console.log('üîç [ModernRoleLogger] R√¥le exclu des logs');
                return;
            }
            
            // V√©rifier si l'utilisateur a d√©j√† un r√¥le exclu (pour √©viter de logger les changements de r√¥les pour les utilisateurs exclus)
            if (exclusions.excludedRoles && member.roles) {
                const hasExcludedRole = member.roles.cache.some(r => 
                    exclusions.excludedRoles.includes(r.id)
                );
                if (hasExcludedRole) {
                    console.log('üîç [ModernRoleLogger] Utilisateur avec r√¥le exclu des logs');
                    return;
                }
            }

            // Utiliser le webhook logger moderne
            await webhookLogger.logRoleChange(member, role, action, moderator);
            console.log(`‚úÖ [ModernRoleLogger] R√¥le ${action} logg√© avec succ√®s via webhook`);

        } catch (error) {
            console.error(`‚ùå [ModernRoleLogger] Erreur lors du log du r√¥le ${action}:`, error);
        }
    }
};