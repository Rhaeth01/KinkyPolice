const { EmbedBuilder } = require('discord.js');
const configManager = require('./configManager');
const webhookLogger = require('./webhookLogger');

class VoiceLogger {
    constructor() {
        this.colors = {
            join: '#32CD32',      // Vert lime pour rejoindre
            leave: '#DC143C',     // Rouge crimson pour quitter
            move: '#4169E1',      // Bleu royal pour d√©placement
            mute: '#ff9900',      // Orange pour mute (non utilis√©)
            unmute: '#00ff99',    // Vert clair pour unmute (non utilis√©)
            deafen: '#ff0099',    // Rose pour deafen (non utilis√©)
            undeafen: '#99ff00',  // Vert lime pour undeafen (non utilis√©)
            stream: '#9900ff',    // Violet pour stream (non utilis√©)
            camera: '#ffff00',    // Jaune pour cam√©ra (non utilis√©)
            suppress: '#666666'   // Gris pour suppress (non utilis√©)
        };

        this.icons = {
            join: 'üü¢',
            leave: 'üî¥',
            move: 'üîÑ',
            mute: 'üîá',
            unmute: 'üîä',
            deafen: 'üîï',
            undeafen: 'üîî',
            stream: 'üì∫',
            camera: 'üì∑',
            suppress: 'üö´',
            voice: 'üéôÔ∏è',
            user: 'üë§',
            time: '‚è∞',
            channel: 'üîä'
        };
    }

    /**
     * Envoie un log vocal format√© via webhook
     * @param {Guild} guild - Le serveur Discord
     * @param {Object} logData - Les donn√©es du log
     */
    async sendLog(guild, logData) {
        // Filtrer pour ne garder que join, leave et move
        if (!['join', 'leave', 'move'].includes(logData.type)) {
            return; // Ignorer les autres types d'√©v√©nements
        }

        const embed = this.createEmbed(logData);
        
        // Utiliser le webhook logger au lieu d'envoyer directement
        await webhookLogger.log('voice', embed);
    }

    /**
     * Cr√©e un embed format√© pour le log
     * @param {Object} logData - Les donn√©es du log
     * @returns {EmbedBuilder} L'embed cr√©√©
     */
    createEmbed(logData) {
        const { type, member, oldChannel, newChannel, changes } = logData;
        const embed = new EmbedBuilder()
            .setTimestamp()
            .setFooter({ text: `ID: ${member.id}` });

        switch (type) {
            case 'join':
                embed
                    .setColor('#32CD32')
                    .setAuthor({ 
                        name: 'Connexion Vocale', 
                        iconURL: member.user.displayAvatarURL({ dynamic: true }) 
                    })
                    .setDescription(`${this.icons.join} **${member.user.tag}** a rejoint le salon vocal`)
                    .addFields(
                        { 
                            name: `${this.icons.user} Utilisateur`, 
                            value: `${member}`, 
                            inline: true 
                        },
                        { 
                            name: `${this.icons.channel} Salon`, 
                            value: `${newChannel}`, 
                            inline: true 
                        },
                        { 
                            name: `${this.icons.time} Heure`, 
                            value: `<t:${Math.floor(Date.now() / 1000)}:T>`, 
                            inline: true 
                        }
                    );
                break;

            case 'leave':
                embed
                    .setColor('#DC143C')
                    .setAuthor({ 
                        name: 'D√©connexion Vocale', 
                        iconURL: member.user.displayAvatarURL({ dynamic: true }) 
                    })
                    .setDescription(`${this.icons.leave} **${member.user.tag}** a quitt√© le salon vocal`)
                    .addFields(
                        { 
                            name: `${this.icons.user} Utilisateur`, 
                            value: `${member}`, 
                            inline: true 
                        },
                        { 
                            name: `${this.icons.channel} Salon`, 
                            value: `${oldChannel}`, 
                            inline: true 
                        },
                        { 
                            name: `${this.icons.time} Heure`, 
                            value: `<t:${Math.floor(Date.now() / 1000)}:T>`, 
                            inline: true 
                        }
                    );
                break;

            case 'move':
                embed
                    .setColor('#4169E1')
                    .setAuthor({ 
                        name: 'D√©placement Vocal', 
                        iconURL: member.user.displayAvatarURL({ dynamic: true }) 
                    })
                    .setDescription(`${this.icons.move} **${member.user.tag}** a chang√© de salon vocal`)
                    .addFields(
                        { 
                            name: `${this.icons.user} Utilisateur`, 
                            value: `${member}`, 
                            inline: true 
                        },
                        { 
                            name: 'üì§ Ancien salon', 
                            value: `${oldChannel}`, 
                            inline: true 
                        },
                        { 
                            name: 'üì• Nouveau salon', 
                            value: `${newChannel}`, 
                            inline: true 
                        }
                    );
                break;

            case 'stateChange':
                embed
                    .setAuthor({ 
                        name: 'Changement d\'√©tat vocal', 
                        iconURL: member.user.displayAvatarURL({ dynamic: true }) 
                    })
                    .setDescription(`**${member.user.tag}** a modifi√© son √©tat vocal`)
                    .addFields(
                        { 
                            name: `${this.icons.user} Utilisateur`, 
                            value: `${member}`, 
                            inline: true 
                        },
                        { 
                            name: `${this.icons.channel} Salon`, 
                            value: `${newChannel || oldChannel}`, 
                            inline: true 
                        }
                    );

                // Ajouter les changements d'√©tat
                if (changes.length > 0) {
                    const changesText = changes.map(change => {
                        const icon = this.icons[change.type] || '‚Ä¢';
                        return `${icon} ${change.description}`;
                    }).join('\n');

                    embed.addFields({
                        name: 'üìä Changements',
                        value: changesText,
                        inline: false
                    });

                    // D√©finir la couleur selon le premier changement
                    const firstChange = changes[0];
                    embed.setColor(this.colors[firstChange.type] || '#808080');
                }
                break;
        }

        return embed;
    }

    /**
     * Analyse les changements d'√©tat entre deux √©tats vocaux
     * @param {VoiceState} oldState - L'ancien √©tat
     * @param {VoiceState} newState - Le nouvel √©tat
     * @returns {Array} Liste des changements
     */
    analyzeStateChanges(oldState, newState) {
        const changes = [];

        // V√©rifier le stream
        if (oldState.streaming !== newState.streaming) {
            changes.push({
                type: 'stream',
                description: newState.streaming ? 'A commenc√© un stream' : 'A arr√™t√© son stream'
            });
        }

        // V√©rifier la cam√©ra
        if (oldState.selfVideo !== newState.selfVideo) {
            changes.push({
                type: 'camera',
                description: newState.selfVideo ? 'A activ√© sa cam√©ra' : 'A d√©sactiv√© sa cam√©ra'
            });
        }

        // V√©rifier le suppress (server mute/deafen)
        if (oldState.suppress !== newState.suppress) {
            changes.push({
                type: 'suppress',
                description: newState.suppress ? 'A √©t√© supprim√© par le serveur' : 'N\'est plus supprim√©'
            });
        }

        // V√©rifier le server mute
        if (oldState.serverMute !== newState.serverMute) {
            changes.push({
                type: 'mute',
                description: newState.serverMute ? 'A √©t√© rendu muet par un mod√©rateur' : 'N\'est plus muet (mod√©rateur)'
            });
        }

        // V√©rifier le server deafen
        if (oldState.serverDeaf !== newState.serverDeaf) {
            changes.push({
                type: 'deafen',
                description: newState.serverDeaf ? 'A √©t√© rendu sourd par un mod√©rateur' : 'N\'est plus sourd (mod√©rateur)'
            });
        }

        return changes;
    }

    /**
     * Cr√©e un r√©sum√© de session vocale
     * @param {Object} sessionData - Les donn√©es de la session
     * @returns {EmbedBuilder} L'embed du r√©sum√©
     */
    createSessionSummary(sessionData) {
        const { member, channel, duration, pointsEarned } = sessionData;
        
        const durationMinutes = Math.floor(duration / 60000);
        const durationSeconds = Math.floor((duration % 60000) / 1000);
        const durationText = `${durationMinutes}m ${durationSeconds}s`;

        const embed = new EmbedBuilder()
            .setColor('#00ff99')
            .setAuthor({ 
                name: 'R√©sum√© de session vocale', 
                iconURL: member.user.displayAvatarURL({ dynamic: true }) 
            })
            .setDescription(`Session termin√©e pour **${member.user.tag}**`)
            .addFields(
                { 
                    name: `${this.icons.user} Utilisateur`, 
                    value: `${member}`, 
                    inline: true 
                },
                { 
                    name: `${this.icons.channel} Salon`, 
                    value: `${channel}`, 
                    inline: true 
                },
                { 
                    name: '‚è±Ô∏è Dur√©e', 
                    value: durationText, 
                    inline: true 
                },
                { 
                    name: 'üí∞ Points gagn√©s', 
                    value: `${pointsEarned || 0} points`, 
                    inline: true 
                }
            )
            .setTimestamp()
            .setFooter({ text: `ID: ${member.id}` });

        return embed;
    }
}

module.exports = new VoiceLogger();
