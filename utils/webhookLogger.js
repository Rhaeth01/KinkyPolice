const { EmbedBuilder, WebhookClient } = require('discord.js');
const configManager = require('./configManager');

/**
 * Syst√®me de logs moderne avec webhooks pour KinkyPolice
 * Offre de meilleures performances, flexibilit√© et design professionnel
 */
class WebhookLogger {
    constructor() {
        this.webhooks = new Map();
        this.fallbackMode = false;
        
        // Configuration des types de logs avec leurs designs sp√©cifiques
        this.logTypes = {
            moderation: {
                name: 'üõ°Ô∏è Mod√©ration',
                avatar: null, // Sera remplac√© par l'avatar du bot
                color: '#DC143C', // Rouge crimson pour mod√©ration
                fallbackChannel: () => configManager.modLogChannelId
            },
            messages: {
                name: 'üí¨ Messages',
                avatar: null,
                color: '#4682B4', // Bleu acier pour messages
                fallbackChannel: () => configManager.messageLogChannelId
            },
            messagesEdited: {
                name: '‚úèÔ∏è Messages √âdit√©s',
                avatar: null,
                color: '#FF8C00', // Orange fonc√© pour messages √©dit√©s
                fallbackChannel: () => configManager.messageLogChannelId
            },
            messagesDeleted: {
                name: 'üóëÔ∏è Messages Supprim√©s',
                avatar: null,
                color: '#B22222', // Rouge brique pour messages supprim√©s
                fallbackChannel: () => configManager.messageLogChannelId
            },
            voice: {
                name: 'üîä Vocal',
                avatar: null,
                color: '#228B22', // Vert for√™t pour vocal
                fallbackChannel: () => configManager.voiceLogChannelId
            },
            roles: {
                name: 'üë• R√¥les',
                avatar: null,
                color: '#8A2BE2', // Violet bleu pour r√¥les
                fallbackChannel: () => configManager.roleLogChannelId
            },
            member: {
                name: 'üë§ Membres',
                avatar: null,
                color: '#DDA0DD', // Prune pour membres
                fallbackChannel: () => configManager.logChannelId
            },
            tickets: {
                name: 'üé´ Tickets',
                avatar: null,
                color: '#C71585', // Violet rouge pour tickets
                fallbackChannel: () => configManager.logsTicketsChannelId
            }
        };
        
        this.botAvatar = null; // Stockera l'avatar du bot
    }

    /**
     * Initialise les webhooks pour tous les types de logs
     */
    async initialize(client) {
        try {
            console.log('üöÄ [WebhookLogger] Initialisation du syst√®me de webhooks...');
            
            // Stocker l'avatar du bot pour tous les webhooks
            this.botAvatar = client.user.displayAvatarURL({ size: 256 });
            
            // Mettre √† jour les avatars de tous les types de logs avec l'avatar du bot
            for (const [type, config] of Object.entries(this.logTypes)) {
                config.avatar = this.botAvatar;
            }
            
            // R√©cup√©rer les URLs de webhooks depuis la configuration
            const webhookConfig = configManager.getWebhookConfig();
            
            if (!webhookConfig || Object.keys(webhookConfig).length === 0) {
                console.log('‚ö†Ô∏è [WebhookLogger] Aucun webhook configur√©, cr√©ation automatique...');
                await this.setupWebhooks(client);
                return;
            }

            // Initialiser les clients webhooks existants
            for (const [type, url] of Object.entries(webhookConfig)) {
                if (url && this.logTypes[type]) {
                    try {
                        this.webhooks.set(type, new WebhookClient({ url }));
                        console.log(`‚úÖ [WebhookLogger] Webhook ${type} initialis√©`);
                    } catch (error) {
                        console.error(`‚ùå [WebhookLogger] Erreur webhook ${type}:`, error.message);
                    }
                }
            }

            // V√©rifier si on a les nouveaux webhooks pour messages √©dit√©s/supprim√©s
            const hasMessageWebhooks = webhookConfig.messagesEdited && webhookConfig.messagesDeleted;
            if (!hasMessageWebhooks && webhookConfig.messages) {
                console.log('‚ö†Ô∏è [WebhookLogger] Migration n√©cessaire pour les webhooks de messages...');
                // On ne fait pas la migration automatique, on laisse l'admin utiliser /webhook-config
            }

            console.log(`üéâ [WebhookLogger] ${this.webhooks.size} webhooks initialis√©s avec succ√®s`);
            
        } catch (error) {
            console.error('‚ùå [WebhookLogger] Erreur lors de l\'initialisation:', error);
            this.fallbackMode = true;
        }
    }

    /**
     * Cr√©e automatiquement les webhooks pour tous les canaux de logs
     */
    async setupWebhooks(client) {
        try {
            const webhookUrls = {};
            const processedChannels = new Set();

            for (const [type, config] of Object.entries(this.logTypes)) {
                const channelId = config.fallbackChannel();
                if (!channelId) continue;

                const channel = client.channels.cache.get(channelId);
                if (!channel) {
                    console.error(`‚ùå [WebhookLogger] Canal ${type} introuvable: ${channelId}`);
                    continue;
                }

                try {
                    // Pour les webhooks de messages, on v√©rifie si on a d√©j√† cr√©√© des webhooks sur ce canal
                    if (type === 'messagesEdited' || type === 'messagesDeleted') {
                        // On cr√©e un webhook s√©par√© pour chaque type m√™me s'ils sont sur le m√™me canal
                        const webhook = await channel.createWebhook({
                            name: config.name,
                            avatar: this.botAvatar,
                            reason: 'Syst√®me de logs moderne KinkyPolice - Messages sp√©cifiques'
                        });

                        this.webhooks.set(type, new WebhookClient({ url: webhook.url }));
                        webhookUrls[type] = webhook.url;
                        
                        console.log(`‚úÖ [WebhookLogger] Webhook cr√©√© pour ${type}: ${webhook.name}`);
                    } else if (!processedChannels.has(channelId)) {
                        // Pour les autres types, on √©vite de cr√©er plusieurs webhooks sur le m√™me canal
                        const webhook = await channel.createWebhook({
                            name: config.name,
                            avatar: this.botAvatar,
                            reason: 'Syst√®me de logs moderne KinkyPolice'
                        });

                        this.webhooks.set(type, new WebhookClient({ url: webhook.url }));
                        webhookUrls[type] = webhook.url;
                        processedChannels.add(channelId);
                        
                        console.log(`‚úÖ [WebhookLogger] Webhook cr√©√© pour ${type}: ${webhook.name}`);
                    }
                } catch (error) {
                    console.error(`‚ùå [WebhookLogger] Impossible de cr√©er webhook ${type}:`, error.message);
                }
            }

            // Sauvegarder les URLs dans la configuration
            if (Object.keys(webhookUrls).length > 0) {
                configManager.updateWebhookConfig(webhookUrls);
                console.log('üíæ [WebhookLogger] Configuration webhook sauvegard√©e');
            }

        } catch (error) {
            console.error('‚ùå [WebhookLogger] Erreur setup webhooks:', error);
            this.fallbackMode = true;
        }
    }

    /**
     * Envoie un log via webhook avec fallback automatique
     */
    async log(type, embed, options = {}) {
        try {
            let webhook = this.webhooks.get(type);
            let logConfig = this.logTypes[type];

            // Fallback pour les messages √©dit√©s/supprim√©s vers le webhook g√©n√©ral messages
            if (!webhook && (type === 'messagesEdited' || type === 'messagesDeleted')) {
                webhook = this.webhooks.get('messages');
                if (webhook) {
                    console.log(`üîÑ [WebhookLogger] Fallback ${type} vers webhook messages g√©n√©ral`);
                }
            }

            if (!webhook || this.fallbackMode) {
                return this.fallbackLog(type, embed, options);
            }

            // Appliquer le style du type de log
            if (!embed.data.color && logConfig.color) {
                embed.setColor(logConfig.color);
            }

            const webhookOptions = {
                embeds: [embed],
                username: logConfig.name,
                avatarURL: this.botAvatar || logConfig.avatar,
                ...options
            };

            await webhook.send(webhookOptions);
            console.log(`‚úÖ [WebhookLogger] Log ${type} envoy√© via webhook`);

        } catch (error) {
            console.error(`‚ùå [WebhookLogger] Erreur webhook ${type}:`, error.message);
            
            // Fallback automatique en cas d'erreur
            if (error.code === 10015 || error.code === 50027) {
                console.log(`üîÑ [WebhookLogger] Webhook ${type} invalide, fallback activ√©`);
                this.webhooks.delete(type);
            }
            
            return this.fallbackLog(type, embed, options);
        }
    }

    /**
     * M√©thode de fallback utilisant les canaux classiques
     */
    async fallbackLog(type, embed, options = {}) {
        try {
            const logConfig = this.logTypes[type];
            const channelId = logConfig.fallbackChannel();
            
            if (!channelId) {
                console.error(`‚ùå [WebhookLogger] Aucun canal fallback pour ${type}`);
                return;
            }

            // Note: Pour utiliser client.channels, on devra passer le client en param√®tre
            // ou le stocker dans une variable globale. Pour l'instant, on log juste l'erreur.
            console.log(`üîÑ [WebhookLogger] Fallback vers canal ${channelId} pour ${type}`);
            
        } catch (error) {
            console.error(`‚ùå [WebhookLogger] Erreur fallback ${type}:`, error);
        }
    }

    /**
     * Logs sp√©cialis√©s avec templates pr√©d√©finis
     */

    // üõ°Ô∏è LOGS DE MOD√âRATION
    async logModeration(action, target, moderator, reason, options = {}) {
        // Formater le mod√©rateur en mention si c'est un objet User/GuildMember
        let moderatorDisplay;
        if (moderator && moderator.id) {
            moderatorDisplay = `<@${moderator.id}>`;
        } else {
            moderatorDisplay = moderator || '*Inconnu*';
        }

        const embed = new EmbedBuilder()
            .setTitle(`üõ°Ô∏è ${action}`)
            .setDescription(`**${action}** effectu√© sur ${target}`)
            .addFields(
                { name: 'üéØ Cible', value: `${target}`, inline: true },
                { name: 'üëÆ Mod√©rateur', value: moderatorDisplay, inline: true },
                { name: 'üìù Raison', value: reason || '*Aucune raison fournie*', inline: false }
            )
            .setTimestamp();

        if (options.color) embed.setColor(options.color);
        
        // Si la cible a une photo de profil et qu'aucune thumbnail n'est sp√©cifi√©e
        if (!options.thumbnail && target && target.displayAvatarURL) {
            embed.setThumbnail(target.displayAvatarURL({ dynamic: true }));
        } else if (options.thumbnail) {
            embed.setThumbnail(options.thumbnail);
        }

        return this.log('moderation', embed, options);
    }

    // üí¨ LOGS DE MESSAGES
    async logMessageEdit(oldMessage, newMessage) {
        const embed = new EmbedBuilder()
            .setTitle('‚úèÔ∏è Message √âdit√©')
            .setDescription(`Message √©dit√© dans ${oldMessage.channel}`)
            .addFields(
                { name: 'üë§ Auteur', value: `${oldMessage.author}`, inline: true },
                { name: 'üìç Canal', value: `${oldMessage.channel}`, inline: true },
                { name: 'üïê Modifi√©', value: `<t:${Math.floor(Date.now()/1000)}:R>`, inline: true },
                { name: 'üìú Ancien contenu', value: this.truncateText(oldMessage.content) || '*Contenu vide*', inline: false },
                { name: 'üìù Nouveau contenu', value: this.truncateText(newMessage.content) || '*Contenu vide*', inline: false }
            )
            .setThumbnail(oldMessage.author.displayAvatarURL({ dynamic: true }))
            .setTimestamp();

        // Use the specific webhook type for edited messages
        return this.log('messagesEdited', embed);
    }

    async logMessageDelete(message) {
        const embed = new EmbedBuilder()
            .setTitle('üóëÔ∏è Message Supprim√©')
            .setDescription(`Message supprim√© dans ${message.channel}`)
            .addFields(
                { name: 'üë§ Auteur', value: message.author ? `${message.author}` : '*Auteur inconnu*', inline: true },
                { name: 'üìç Canal', value: `${message.channel}`, inline: true },
                { name: 'üïê Supprim√©', value: `<t:${Math.floor(Date.now()/1000)}:R>`, inline: true },
                { name: 'üìú Contenu', value: this.truncateText(message.content) || '*Contenu vide*', inline: false }
            )
            .setTimestamp();

        // Ajouter la photo de profil si l'auteur est disponible
        if (message.author) {
            try {
                embed.setThumbnail(message.author.displayAvatarURL({ dynamic: true }));
            } catch (error) {
                console.warn('‚ö†Ô∏è [WebhookLogger] Impossible de r√©cup√©rer l\'avatar:', error.message);
            }
        }

        if (message.attachments.size > 0) {
            const attachments = message.attachments.map(att => `[${att.name}](${att.url})`).join('\n');
            embed.addFields({ name: 'üìé Pi√®ces jointes', value: this.truncateText(attachments), inline: false });
        }

        // Use the specific webhook type for deleted messages
        return this.log('messagesDeleted', embed);
    }

    // üë• LOGS DE R√îLES
    async logRoleChange(member, role, action, moderator) {
        // Formater le mod√©rateur : si c'est un User/GuildMember, utiliser la mention, sinon garder le texte
        let moderatorDisplay;
        if (moderator && moderator.id) {
            // C'est un objet User ou GuildMember
            moderatorDisplay = `<@${moderator.id}>`;
        } else {
            // C'est un string ou autre
            moderatorDisplay = moderator || '*Inconnu*';
        }

        const embed = new EmbedBuilder()
            .setTitle(`üõ°Ô∏è R√¥le ${action}`)
            .setDescription(`R√¥le **${role.name}** ${action} pour ${member.user.username}`)
            .addFields(
                { name: 'üë§ Utilisateur', value: `${member}`, inline: true },
                { name: 'üõ°Ô∏è R√¥le', value: `${role}`, inline: true },
                { name: 'üëÆ Mod√©rateur', value: moderatorDisplay, inline: true },
                { name: 'üïê Action', value: `<t:${Math.floor(Date.now()/1000)}:R>`, inline: false }
            )
            .setColor(action === 'ajout√©' ? '#38A169' : '#E53E3E')
            .setThumbnail(member.user.displayAvatarURL())
            .setTimestamp();

        return this.log('roles', embed);
    }

    // üîä LOGS VOCAUX
    async logVoiceActivity(member, action, channel, details = {}) {
        const embed = new EmbedBuilder()
            .setTitle(`üîä ${action}`)
            .setDescription(`${member.user.username} ${action.toLowerCase()}`)
            .addFields(
                { name: 'üë§ Utilisateur', value: `${member}`, inline: true },
                { name: 'üîä Canal', value: channel ? `${channel}` : '*Canal inconnu*', inline: true },
                { name: 'üïê Action', value: `<t:${Math.floor(Date.now()/1000)}:R>`, inline: true }
            )
            .setThumbnail(member.user.displayAvatarURL())
            .setTimestamp();

        if (details.duration) {
            embed.addFields({ name: '‚è±Ô∏è Dur√©e', value: details.duration, inline: true });
        }

        return this.log('voice', embed);
    }

    // üë§ LOGS DE MEMBRES
    async logMemberJoin(member) {
        const embed = new EmbedBuilder()
            .setTitle('üì• Nouveau Membre')
            .setDescription(`${member.user.username} a rejoint le serveur`)
            .addFields(
                { name: 'üë§ Utilisateur', value: `${member}`, inline: true },
                { name: 'üìÖ Compte cr√©√©', value: `<t:${Math.floor(member.user.createdTimestamp/1000)}:R>`, inline: true },
                { name: 'üïê A rejoint', value: `<t:${Math.floor(Date.now()/1000)}:R>`, inline: true },
                { name: 'üìä Total membres', value: `${member.guild.memberCount}`, inline: true }
            )
            .setColor('#38A169')
            .setThumbnail(member.user.displayAvatarURL())
            .setTimestamp();

        return this.log('member', embed);
    }

    async logMemberLeave(member) {
        const embed = new EmbedBuilder()
            .setTitle('üì§ Membre Parti')
            .setDescription(`${member.user.username} a quitt√© le serveur`)
            .addFields(
                { name: 'üë§ Utilisateur', value: `${member.user.tag}`, inline: true },
                { name: 'üïê A quitt√©', value: `<t:${Math.floor(Date.now()/1000)}:R>`, inline: true },
                { name: 'üìä Total membres', value: `${member.guild.memberCount}`, inline: true }
            )
            .setColor('#E53E3E')
            .setThumbnail(member.user.displayAvatarURL())
            .setTimestamp();

        if (member.roles.cache.size > 1) {
            const roles = member.roles.cache
                .filter(role => role.name !== '@everyone')
                .map(role => role.name)
                .join(', ');
            embed.addFields({ name: 'üõ°Ô∏è R√¥les', value: this.truncateText(roles), inline: false });
        }

        return this.log('member', embed);
    }

    // üé´ LOGS DE TICKETS
    async logTicketAction(action, ticketName, user, moderator, reason) {
        const embed = new EmbedBuilder()
            .setTitle(`üé´ Ticket ${action}`)
            .setDescription(`Ticket **${ticketName}** ${action.toLowerCase()}`)
            .addFields(
                { name: 'üë§ Utilisateur', value: `${user}`, inline: true },
                { name: 'üëÆ Mod√©rateur', value: `${moderator}`, inline: true },
                { name: 'üïê Action', value: `<t:${Math.floor(Date.now()/1000)}:R>`, inline: true }
            )
            .setTimestamp();

        if (reason) {
            embed.addFields({ name: 'üìù Raison', value: reason, inline: false });
        }

        const actionColors = {
            'cr√©√©': '#38A169',
            'ferm√©': '#E53E3E',
            'supprim√©': '#9F7AEA'
        };

        embed.setColor(actionColors[action.toLowerCase()] || '#3182CE');

        return this.log('tickets', embed);
    }

    /**
     * Utilitaires
     */
    truncateText(text, maxLength = 1024) {
        if (!text) return text;
        return text.length > maxLength ? text.substring(0, maxLength - 3) + '...' : text;
    }

    /**
     * M√©thodes de gestion
     */
    async refreshWebhook(type) {
        try {
            this.webhooks.delete(type);
            console.log(`üîÑ [WebhookLogger] Webhook ${type} supprim√© du cache`);
        } catch (error) {
            console.error(`‚ùå [WebhookLogger] Erreur refresh webhook ${type}:`, error);
        }
    }

    getStatus() {
        return {
            webhooksActive: this.webhooks.size,
            fallbackMode: this.fallbackMode,
            types: Object.keys(this.logTypes)
        };
    }
}

// Export singleton
module.exports = new WebhookLogger();